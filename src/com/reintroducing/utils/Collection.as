/** * @author Adobe [http://www.adobe.com] * @author Ported to AS3 by Matt Przybylski [http://www.reintroducing.com] * @version 1.0 */package com.reintroducing.utils{	public class Collection extends Object	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		private var _items:Array;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------						//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			/**		 * Helper class used to manage a collection of objects. This class is similar to the Java		 * Collection interface.  Developers can extend this class to create new Collection types		 * that provide additional functionality such as ordering and sorting.		 * 		 * @return Nothing		 */		public function Collection():void		{			super();						this._items = new Array();		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------				// Finds an item within the Collection and returns it's index.		private function internalGetItem($item:Object):int 		{			var result:int = -1;						for (var i:int = 0; i < this._items.length; i++) 			{				if (this._items[i] == $item) 				{					result = i;					break;				}			}						return result; 		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Adds a new item to the end of the Collection.		 * 		 * @param $item * to be added to the Collection. If item is Null it will not be added to the Collection.		 * 		 * @return Boolean true if the Collection was changed as a result of the operation.		 */		public function addItem($item:*):Boolean 		{			var result:Boolean = false;						if ($item != null)			{				this._items.push($item);								result = true;			} 						return result;		}				/**		 * Removes a single item from the Collection.  Returns false if item is not found.		 * 		 * @param $item reference to Collection item to be removed from Collection.		 * 		 * @return Boolean true if item is found and successfully removed.  False if item is not found.		 */		public function removeItem($item:*):Boolean 		{			var result:Boolean = false;			var itemIndex:int = this.internalGetItem($item);						if (itemIndex > -1)			{				this._items.splice(itemIndex, 1);								result = true;			}						return result;		}				/**		 * Removes all items from the Collection.		 * 		 * @return Nothing		 */		public function clear():void 		{			this._items = new Array();		}				/**		 * Returns true if this Collection contains the specified item.		 * 		 * @param $item * whose presence in this collection is to be tested. 		 * 		 * @return Boolean true if this collection contains the specified item.		 */		public function contains($item:*):Boolean 		{			return (this.internalGetItem($item) > -1);		}				/**		 * Returns an item within the Collection using it's index.		 * 		 * @param $index location of item within the Collection.		 * 		 * @return * reference to item.		 */		public function getItemAt($index:int):* 		{			return this._items[$index];		}				/**		 * Returns an iterator over the elements in this collection. There are no guarantees concerning 		 * the order in which the elements are returned (unless this collection is an instance of some 		 * class that provides a guarantee).		 * 		 * @return Iterator object that is used to iterate through the collection.		 */		public function getIterator():Iterator 		{			return (new Iterator(this));		}				/**		 * Returns the current length		 * 		 * @return int value reflecting the number of items in this Collection.		 */		public function getLength():int		{			return this._items.length;		}				/**		 * Returns true if the Collection is empty.		 * 		 * @return Boolean true if Collection is empty.		 */		public function isEmpty():Boolean 		{			return (this._items.length == 0);		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------				//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			public function toString():String		{			return "com.reintroducing.utils.Collection";		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}